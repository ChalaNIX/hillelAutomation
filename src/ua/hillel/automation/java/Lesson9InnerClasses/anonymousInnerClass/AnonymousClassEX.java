package ua.hillel.automation.java.Lesson9InnerClasses.anonymousInnerClass;
//анонімні внутрішні класи використовуються коли створення окремого класу, з якогось інтерфейсу немає сенсу
//тому що інтерфейс сам по собі невеликий, немає сенсу робити окрему реалізацію
public class AnonymousClassEX {
    public static void main(String[] args) {
        //ми створюємо анонімний клас. з нього створюємо об'єкт, який присвоюємо змінній iface1
        //створюємо об'єкт типу інтерфейсу (анонімна імплетементація, виглядає дивно, це ок
        CustomIface iface1 = new CustomIface() {
            //метод що підтягуються з інтерфейсу автоматично
            @Override
            public int getNum() {
                //тут можна додати реалізацію
                return 0;
            }
        };
        System.out.println(iface1.getNum());
        //потім створюємо інший анонімний клас, з якого створюємо інший об'єкт зі своєю реалізацією
        //якщо нам потрібно замінити поведінку методу getNum() ми можемо створити новий анонімний клас і так само його реалізацію
        iface1 = new CustomIface() {
            @Override
            public int getNum() {
                return 290;
            }
        };
        System.out.println(iface1.getNum());
    }
    //робимо так, бо немає сенсу виносити це в окремий клас
    //зустрічається не часто
    //в 8 версії додали анонімні функції (lambda) замінили анонімні класи
}
